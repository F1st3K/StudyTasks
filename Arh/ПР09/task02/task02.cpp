//ВАРИАНТ № А22/Б9
//2. Дан массив целых чисел. Размер массива может быть разный. 
//Переставить в обратном порядке элементы массива,
//расположенные между его минимальным и максимальным элементами, 
//включая минимальный и максимальный элементы. 
//Сохранить в регистр AL количество перестановок.
//

#include "stdafx.h"

int vMas[] = {3, 4, 1, 2, 5, 3, 9, 4, 7, 5, 8, 25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,};
int _tmain(int argc, _TCHAR* argv[])
{
	_asm
	{
		lea esi, vMas	//получаем сам массив
		xor eax, eax	//очищаем регистры
		xor ebx, ebx
		mov bh, [esi]	//берем элемент масива
		mov ecx, esi	//и его адресс
		add esi, 4

	Max:
		cmp[esi], 0h	//проверям конец 
		je con			//переходим к подготовке регитров для нахождения минимума
		mov bl, [esi]	//берем след элемнт строки
		cmp bh, bl		//сравниваем элементы
		jl rwrtmx		//нашли больший? перезаписываем
		add esi, 4		//продвигаемся по массиву
		jmp Max			//повторяем

	rwrtmx:
		mov bh, bl		//если нашли больший элемент перезаписываем значение
		mov ecx, esi	//и его адресс
		add esi, 4		//продвигаемся по массиву
		jmp Max			//повторяем

	con:
		lea esi, vMas	//получаем начало массива
		xor eax, eax	//очищаем регистры
		xor ebx, ebx
		mov bh, [esi]	//берем элемент масива
		mov edx, esi	//а также его адресс
		add esi, 4		
		jmp Min			//идем искать минимум

	Min:
		cmp[esi], 0h	//проверям конец 
		je rerange		//после перебора массива идем переставлять элементы
		mov bl, [esi]	//берем след элемнт строки
		cmp bh, bl		//сравниваем элементы
		jg rwrtmn		//нашли меньший? перезаписываем
		add esi, 4		//продвигаемся по массиву
		jmp Min			//повторяем

	rwrtmn :
		mov bh, bl		//если нашли больший элемент перезаписываем значение
		mov edx, esi	//и его адресс
		add esi, 4		//продвигаемся по массиву
		jmp Min			//повтор

	rerange:
		cmp ecx, edx	//если получилось нечетное кол эл проверяем не пришли ли мы к последнему среднему элементу
		je end
		cmp ecx, edi	//проверяем остались ли у нас еще не передвинутые элементы между адрессами
		je end
		mov bh, [ecx]	//для перемещения элементов в памяти испоьзуем регистры
		mov bl, [edx]	
		mov edi, edx	//эта строчка нужна чтобы понимать когда нам нужно заканчивать перемещатся по памяти
		cmp bh, bl		//если элементы одинаковые
		je pass			//то переставлять их ненужно
		mov [edx], bh	//переставляем
		mov[ecx], bl
		inc al			//записываем итерацию цикла
		sub ecx, 4		//двигаемся к середине массива
		add edx, 4
		jmp rerange		//повторяем
	
	pass:
		sub ecx, 4
		add edx, 4
		jmp rerange
		
	end:
		nop

//в al у нас количество пар переставленных элементов,
//если элементы в паре были одинаковые, то есть распологались семитрично,то программа их не переставляет,
//так же и со средним элеентом если промежуток получился с нечетным количеством элементов
	}
	return 0;
}

