// pr03.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
/*1. Проверить истинность высказывания: "Все цифры данного целого положительного четырехзначного числа различны".
2. Задано целое положительное четырехзначное число N (N > 0). Найти сумму между произведениями первых двух и последних двух его цифр.
3. Проверить истинность высказывания: "Данное целое положительное число является четным трехзначным числом".
4. Вводится строка. Длина строки может быть разной. Подсчитать количество содержащихся в ней строчных букв латинского алфавита.
5. Вводится строка, состоящая из слов, разделенных подчеркиваниями (одним или несколькими). Длина строки может быть разной. 
Преобразовать в строке все строчные буквы (как латинские, так и русские) в прописные, а прописные — в строчные.*/
#include <iostream>
#include <string.h>

void Task01()
{
    printf("\nTask01------------------------------------\n");
    int Number;
    printf("Enter Number: ");
    scanf_s("%d", &Number);
    if (!(1000 <= Number && Number < 10000))
    {
        printf("!!!warning\n");
        printf("\n------------------------------------------\n");
        Task01();
        return;
    }
    for (int i = Number; i >= 1; i /= 10)
    {
        for (int j = Number; j >= 1; j /= 10)
        {
            if ((i % 10 == j % 10) && (i != j))
            {
                printf("false");
                printf("\n------------------------------------------\n");
                return;
            }
        }
        
    }
    printf("true\n");
    printf("\n------------------------------------------\n");
}
void Task02()
{
    printf("\nTask02------------------------------------\n");
    int N;
    int s1 = 0;
    int s2 = 0;
    int Res = 0;
    printf("Enter Number: ");
    scanf_s("%d", &N);
    if (!(1000 <= N && N < 10000))
    {
        printf("!!!warning");
        printf("\n------------------------------------------\n");
        Task02();
        return;
    }
    for (int i = N; i >= 1; i /= 10)
    {
        if (i == N)
        {
            s1 = (i % 10) * ((i / 10) % 10);
        }
        else if (i/100 >= 1)
        {
            s2 = ((i / 100) % 10) * ((i / 10) % 10);
        }
    }
    Res = s1 + s2;
    printf("Result: %d", Res);
    printf("\n------------------------------------------\n");
}
void Task03()
{
    printf("\nTask03------------------------------------\n");
    int Number;
    printf("Enter Number: ");
    scanf_s("%d", &Number);
    if (Number<=0)
    {
        printf("!!!warning");
        printf("\n------------------------------------------\n");
        Task03();
        return;
    }
    if ((100 <= Number && Number < 1000) && (Number % 2 == 0))
    {
        printf("Result: true\n");
    }
    else
    printf("Result: false\n");
    printf("\n------------------------------------------\n");
}
void Task04()
{
    printf("\nTask04------------------------------------\n");
    char str [200];
    int Counter = 0;
    printf("Enter String: ");
    scanf_s("%sring", str, sizeof(str));

    for (int i = 0; str[i] != '\0'; i++)
    {
        if (islower(str[i]))
        {
            Counter++;
        }
    }
    printf("Result: %d", Counter);
    printf("\n------------------------------------------\n");
}
void Task05()
{
    printf("\nTask05------------------------------------\n");
    char str[200];
    printf("Enter String: ");
    scanf_s("%sring", str, sizeof(str));
    
    for (int i = 0; str[i] != '\0'; i++)
    {
        if (str[i] != '_')
        {
            if (islower(str[i]))
                str[i] = toupper(str[i]);
            else if (isupper(str[i]))
                str[i] = tolower(str[i]);
        }
    }
    printf("Result: %s", str);
    printf("\n------------------------------------------\n");
}
int main()
{
    Task01();
    Task02();
    Task03();
    Task04();
    Task05();
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
